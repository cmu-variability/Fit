<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <script>
    const ROOM_ID = "<%= roomId %>"
  </script>
  <script defer src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
  <script src="/socket.io/socket.io.js" defer></script>
  <script src="https://www.gstatic.com/firebasejs/8.7.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.7.0/firebase-database.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.7.0/firebase-auth.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.7.0/firebase-storage.js"></script>
  <script src="/firebase_config.js"></script>
  <script src="/second_phase.js" defer></script>
  <script>
    function displayVideo() {
      const storageRef = firebase.storage().ref();
      const videoRef = storageRef.child(`videos/${ROOM_ID}/meeting_record.webm`);

      videoRef.getDownloadURL().then((url) => {
        const videoElement = document.createElement('video');
        videoElement.src = url;
        videoElement.controls = true;
        videoElement.style.width = '100%';
        videoElement.style.height = '100%';

        const leftGridItem = document.querySelector('.left-grid-item');
        leftGridItem.innerHTML = ''; // Clear any existing content
        leftGridItem.appendChild(videoElement);

        // Check if the document is in fullscreen mode
        const isFullscreen = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;

        // Conditionally apply the transform property
        videoElement.style.transform = isFullscreen ? 'scaleX(-1)' : 'none';
      }).catch((error) => {
        console.error('Error getting video URL:', error);
      });
    }
  </script>

  <title>Document</title>
  <style>
    body {
      margin: 0; /* Remove default margin */
    }

    #video-grid {
      background-color: black;
      display: flex; /* Use flexbox */
      flex-direction: column; /* Stack elements vertically */
      align-items: center; /* Center items horizontally */
      justify-content: flex-end; /* Align items to the bottom */
      height: 100vh; /* Full height of the viewport */
    }

    video {
      transform: scaleX(-1); /* Mirrored appearance, remove this if not needed */
      max-width: 100%; /* Make sure the video doesn't exceed its container width */
    }

    .container {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100px;
    }

    button {
      background-color: rgb(227, 142, 227);
      color: white;
      padding: 10px 20px;
      margin-right: 50px;
      font-size: medium;
      border-radius: 10px;
    }

    .grid-container {
      display: grid;
      grid-template-columns: 3fr 1fr; /* 3/4 and 1/4 width */
      grid-template-rows: 1fr; /* 1/2 height */
      width: 100%;
      height: 480px;
      /* Add any other styles for the top grid container */
    }

    /* Style for the left grid item */
    .left-grid-item {
      grid-column: 1; /* Start at column 1 (3/4 width) */
      grid-row: 1; /* Start at row 1 (1/2 height) */
      width: 100%;
      height: 100%;
      background-color: rgb(211, 211, 229);
      display: flex;
      justify-content: center;
      align-items: center;
    }

    /* Style for the right grid item */
    .right-grid-item {
      grid-column: 2; /* Start at column 2 (1/4 width) */
      grid-row: 1; /* Start at row 1 (1/2 height) */
      width: 100%;
      height: 100%;
      background-color: rgb(231, 184, 228);
      /* Add any other styles for the right item */
    }

  </style>
</head>
<body>
  <div class="grid-container">
    <!-- Left grid item -->
    <div class="left-grid-item">
      <!-- Red rectangle content -->
      <h>recording replay</h>
      <!-- Content for the top left grid item goes here -->
      <!-- For example, researcher-specific elements -->
    </div>

    <!-- Right grid item -->
    <div class="right-grid-item">
      <h>Critical Moment List</h>
      <ul id="critical-moments-list">
        <li>Default Message: Loading moments...</li>
      </ul>
    </div>

    <script>
      displayVideo();
    </script>
  </div>

  <!-- Video grid container for the bottom section -->
  <div id="video-grid">
    <!-- Your camera video elements will be added here dynamically -->
  </div>

  <div id="device adjust">
    <!--mute-->
    <label>
      <input type="checkbox" id="toggle-mic" checked>
      <span>Microphone</span>
    </label>
      <!-- Audio Device Dropdown -->
    <label for="audio-device-dropdown"></label>
    <select id="audio-device-dropdown">
      <option value="" selected disabled></option>
    </select>
    <!--turn off camera-->
    <label>
      <input type="checkbox" id="toggle-camera" checked>
      <span>Camera</span>
    </label>
    <!-- Video Device Dropdown -->
    <label for="video-device-dropdown"></label>
    <select id="video-device-dropdown">
      <option value="" selected disabled></option>
    </select>
  </div>

  <div class="container">
    <button id="leaveSecondCallButton">Leave Call</button>
  </div>


</body>
</html>

